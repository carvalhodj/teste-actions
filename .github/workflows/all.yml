name: All

on:
  pull_request:
    branches: [main]
  push:
    tags:
      - "*"
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    #    if: ${{ github.event.action }} == 'opened'
    steps:
      - uses: actions/checkout@v3
      # - name: Linter
      #   run: |
      #     sudo apt install clang-format
      #     find ${{github.workspace}}/src/ -iname '*.h' -o -iname '*.c' | xargs clang-format --dry-run --Werror
      - name: Build cmake
        run: |
          sudo apt install ninja-build
          cmake -S ${{github.workspace}}/src -B ${{github.workspace}}/build -GNinja

      - name: Build ninja
        run: |
          cd ${{github.workspace}}/build        
          ninja
          zip release.zip hello_actions
          cd ../scripts/
          ./teste.sh
          mkdir -p ${{github.workspace}}/tmp
          cp ${{github.workspace}}/build/release.zip ${{github.workspace}}/tmp/

      - name: Build cmake (LOG)
        run: |
          cd ${{github.workspace}}
          cmake -S ${{github.workspace}}/src -B ${{github.workspace}}/build -GNinja

      - name: Build ninja (LOG)
        run: |
          cd ${{github.workspace}}/build        
          ninja
          zip release.zip hello_actions
          mv release.zip release_log.zip
          cp release_log.zip ${{github.workspace}}/tmp

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: |
            ${{github.workspace}}/tmp/release.zip
            ${{github.workspace}}/readme.zip
            ${{github.workspace}}/tmp/release_log.zip

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build
    steps:
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDDHHMMSS
          utcOffset: "-03:00"
      - name: Set current time env variable
        env:
          F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
        run: echo $F_TIME
      - name: Download
        uses: actions/download-artifact@v3
        with:
          name: my-artifact
      - name: Get Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Rename file
        run: |
          ls -l
          mv tmp/release.zip tmp/release_${{ env.RELEASE_VERSION }}_PROD_${{ F_TIME }}.zip
          mv tmp/release_log.zip tmp/release_${{ env.RELEASE_VERSION }}_LOG_${{ F_TIME }}.zip
      - name: Publishing
        uses: ncipollo/release-action@v1.10.0
        with:
          artifacts: |
            tmp/release_${{ env.RELEASE_VERSION }}_PROD_${{ F_TIME }}.zip
            tmp/release_${{ env.RELEASE_VERSION }}_LOG_${{ F_TIME }}.zip
            readme.zip
          allowUpdates: true
          generateReleaseNotes: true
          token: ${{ env.GITHUB_TOKEN }}
            
